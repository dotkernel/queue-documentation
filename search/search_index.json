{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Queue Dotkernel component used to queue tasks to be processed asynchronously based on netglue/laminas-messenger","title":"Home"},{"location":"#queue","text":"Dotkernel component used to queue tasks to be processed asynchronously based on netglue/laminas-messenger","title":"Queue"},{"location":"v1/commands/","text":"Available commands and usage The commands available are: GetFailedMessagesCommand.php (failed) - returns logs with messages that failed to process (levelName:error) GetProcessedMessagesCommand.php (procecssed) - returns logs with messages that were successfully processed (levelName:info) GetQueuedMessagesCommand (inventory) - returns all queued messages from Redis stream 'messages' The commands can be run in two different ways: CLI To run the commands via CLI, use the following syntax: php bin/cli.php failed --start=\"yyyy-mm-dd\" --end=\"yyyy-mm-dd\" --limit=int php bin/cli.php processed --start=\"yyyy-mm-dd\" --end=\"yyyy-mm-dd\" --limit=int php bin/cli.php inventory TCP message To use commands using TCP messages the following messages can be used: echo \"failed --start=yyyy-mm-dd --end=yyyy-mm-dd --limit=days\" | socat -t1 - TCP:host:port echo \"processed --start=yyyy-mm-dd --end=yyyy-mm-dd --limit=days\" | socat -t1 - TCP:host:port In both cases the flags are optional. Keep in mind if both start and end are set, limit will not be applied, it's only used when one of start or end is missing. In order to be able to test the processed command, by default when processing the \"control\" message, it is logged as successfully processed with \"levelName\":\"info\" simulating that the message was processed successfully. To use it run the following message: echo \"control\" | socat -t1 - TCP:host:port Using -t1 flag is not necessary but can be useful, it is used to set a timeout of n seconds for both reading and writing, after n second of inactivity, socat will terminate the connection. If the timeout is not set and the server does not respond or keep the connection open, the socat process could hang indefinitely. echo \"inventory\" | socat -t1 - TCP:host:port","title":"Commands"},{"location":"v1/commands/#available-commands-and-usage","text":"The commands available are: GetFailedMessagesCommand.php (failed) - returns logs with messages that failed to process (levelName:error) GetProcessedMessagesCommand.php (procecssed) - returns logs with messages that were successfully processed (levelName:info) GetQueuedMessagesCommand (inventory) - returns all queued messages from Redis stream 'messages' The commands can be run in two different ways:","title":"Available commands and usage"},{"location":"v1/commands/#cli","text":"To run the commands via CLI, use the following syntax: php bin/cli.php failed --start=\"yyyy-mm-dd\" --end=\"yyyy-mm-dd\" --limit=int php bin/cli.php processed --start=\"yyyy-mm-dd\" --end=\"yyyy-mm-dd\" --limit=int php bin/cli.php inventory","title":"CLI"},{"location":"v1/commands/#tcp-message","text":"To use commands using TCP messages the following messages can be used: echo \"failed --start=yyyy-mm-dd --end=yyyy-mm-dd --limit=days\" | socat -t1 - TCP:host:port echo \"processed --start=yyyy-mm-dd --end=yyyy-mm-dd --limit=days\" | socat -t1 - TCP:host:port In both cases the flags are optional. Keep in mind if both start and end are set, limit will not be applied, it's only used when one of start or end is missing. In order to be able to test the processed command, by default when processing the \"control\" message, it is logged as successfully processed with \"levelName\":\"info\" simulating that the message was processed successfully. To use it run the following message: echo \"control\" | socat -t1 - TCP:host:port Using -t1 flag is not necessary but can be useful, it is used to set a timeout of n seconds for both reading and writing, after n second of inactivity, socat will terminate the connection. If the timeout is not set and the server does not respond or keep the connection open, the socat process could hang indefinitely. echo \"inventory\" | socat -t1 - TCP:host:port","title":"TCP message"},{"location":"v1/installation/","text":"INSTALLATION git clone git clone -b default-queue https://github.com/dotkernel/queue.git Edit .dist files from config/autoload folder local.php.dist log.local.dist messenger.local.php.dist swoole.local.php.dist Run Composer composer install --no-dev Create services ( daemon) Edit the files from /daemon folder and set proper paths copy them in /etc/systemd/system/ sudo cp /home/dotkernel/queue/daemon\\swoole.service sudo cp /home/dotkernel/queue/daemon\\messenger.service Start the daemon sudo systemctl daemon-reload sudo systemctl enable swoole.service sudo systemctl start swoole.service sudo systemctl status swoole.service Testing the installation Send a request from your local machine echo \"Hello\" | socat -T1 - TCP:SERVER-IP:8556","title":"Installation"},{"location":"v1/installation/#installation","text":"","title":"INSTALLATION"},{"location":"v1/installation/#git-clone","text":"git clone -b default-queue https://github.com/dotkernel/queue.git","title":"git clone"},{"location":"v1/installation/#edit-dist-files-from-configautoload-folder","text":"local.php.dist log.local.dist messenger.local.php.dist swoole.local.php.dist","title":"Edit .dist files from config/autoload folder"},{"location":"v1/installation/#run-composer","text":"composer install --no-dev","title":"Run Composer"},{"location":"v1/installation/#create-services-daemon","text":"Edit the files from /daemon folder and set proper paths copy them in /etc/systemd/system/ sudo cp /home/dotkernel/queue/daemon\\swoole.service sudo cp /home/dotkernel/queue/daemon\\messenger.service","title":"Create services ( daemon)"},{"location":"v1/installation/#start-the-daemon","text":"sudo systemctl daemon-reload sudo systemctl enable swoole.service sudo systemctl start swoole.service sudo systemctl status swoole.service","title":"Start the daemon"},{"location":"v1/overview/","text":"Overview [!IMPORTANT] Dotkernel component used to queue tasks to be processed asynchronously based on netglue/laminas-messenger Badges","title":"Overview"},{"location":"v1/overview/#overview","text":"[!IMPORTANT] Dotkernel component used to queue tasks to be processed asynchronously based on netglue/laminas-messenger","title":"Overview"},{"location":"v1/overview/#badges","text":"","title":"Badges"},{"location":"v1/server-setup/","text":"Server setup Below instructions are working only on AlmaLinux 9 For other OS's need to be adapted accordingly Starting point A server with AlmaLinux 9 freshly installed, with root access and updated Update OS dnf update Create a new user with sudo permissions useradd dotkernel passwd dotkernel usermod -aG wheel dotkernel reboot SSH to the server as new user Install various utilities sudo dnf install -y dnf-utils sudo dnf install zip unzip socat wget PHP sudo dnf install -y https://rpms.remirepo.net/enterprise/remi-release-9.rpm sudo dnf module enable php:remi-8.4 sudo dnf install -y php php-cli php-common php-intl Start PHP-FPM sudo systemctl start php-fpm sudo systemctl enable php-fpm Install and verify swoole sudo dnf install php-pecl-swoole6 php -i | grep swoole Valkey sudo dnf install valkey sudo systemctl enable valkey sudo systemctl start valkey sudo valkey-cli ping Valkey PHP module sudo dnf install php-pecl-redis php -i | grep redis GIT sudo dnf install git Composer wget https://getcomposer.org/installer -O composer-installer.php sudo chmod 777 /usr/local/bin php composer-installer.php --filename=composer --install-dir=/usr/local/bin Firewall setup In order to add a minimum level of security, a firewall needs to be installed and allows connections from outside only to certain ports, from certain IP's. Firewall setup is not mandatory sudo dnf install firewalld sudo systemctl enable firewalld Before starting the firewall, be sure you will not be locked outside sudo firewall-offline-cmd --zone=public --add-port=22/tcp --permanent sudo systemctl start firewalld By default, Swoole runs on port 8556. You can change that in the configuration file. sudo firewall-cmd --permanent --add-rich-rule='rule family=\"ipv4\" source address=\"YOUR_IP_ADDRESS\" port port=\"8556\" protocol=\"tcp\" accept' sudo firewall-cmd --reload NOW THE SERVER IS READY","title":"Server Setup"},{"location":"v1/server-setup/#server-setup","text":"Below instructions are working only on AlmaLinux 9 For other OS's need to be adapted accordingly","title":"Server setup"},{"location":"v1/server-setup/#starting-point","text":"A server with AlmaLinux 9 freshly installed, with root access and updated","title":"Starting point"},{"location":"v1/server-setup/#now-the-server-is-ready","text":"","title":"NOW THE SERVER IS READY"},{"location":"v1/valkey/","text":"Valkey usage Valkey is an open source (BSD) high-performance key/value datastore that supports a variety of workloads such as caching, message queues, and can act as a primary database. The following commands can be run in the CLI to interact with Valkey. To enter CLI run: valkey-cli Utility Commands List all keys matching a pattern. KEYS * Get server information and statistics. INFO Check if the server is running. PING Delete all keys in all databases FLUSHALL Check data type stored at a specific key (Possible types: string, list, set, zset, hash, stream) TYPE keyName Key-Value Operations Set a string key to a value. SET keyName \"keyValue\" Get the value of a key. GET keyName Delete one or more keys. DEL keyName1 keyName2 Stream Commands Read entries from a stream oldest to newest (revers '-' and '+' to reverse order). XRANGE streamName - + Delete stream DEL streamName Remove all stream entries and keep stream key XTRIM streamName MAXLEN 0 Delete specific entry XDEL streamName &lt;entryId&gt;","title":"Valkey"},{"location":"v1/valkey/#valkey-usage","text":"Valkey is an open source (BSD) high-performance key/value datastore that supports a variety of workloads such as caching, message queues, and can act as a primary database. The following commands can be run in the CLI to interact with Valkey. To enter CLI run: valkey-cli","title":"Valkey usage"},{"location":"v1/valkey/#utility-commands","text":"List all keys matching a pattern. KEYS * Get server information and statistics. INFO Check if the server is running. PING Delete all keys in all databases FLUSHALL Check data type stored at a specific key (Possible types: string, list, set, zset, hash, stream) TYPE keyName","title":"Utility Commands"},{"location":"v1/valkey/#key-value-operations","text":"Set a string key to a value. SET keyName \"keyValue\" Get the value of a key. GET keyName Delete one or more keys. DEL keyName1 keyName2","title":"Key-Value Operations"},{"location":"v1/valkey/#stream-commands","text":"Read entries from a stream oldest to newest (revers '-' and '+' to reverse order). XRANGE streamName - + Delete stream DEL streamName Remove all stream entries and keep stream key XTRIM streamName MAXLEN 0 Delete specific entry XDEL streamName &lt;entryId&gt;","title":"Stream Commands"}]}